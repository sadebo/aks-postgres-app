name: Build & Push App

on:
  push:
    branches:
    - main
    paths:
    - 'app/**'
    - 'manifests/**'
    - '.github/workflows/build.yml'
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: ACR Login
      run: az acr login --name myaksacr01

    - name: Build & Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./app
        push: true
        tags: myaksacr01.azurecr.io/flask-app:${{ github.sha }}

    - name: Update manifests with new image tag
      run: |
        sed -i "s|image: .*|image: myaksacr01.azurecr.io/flask-app:${{ github.sha }}|" manifests/base/deployment.yaml
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add manifests/base/deployment.yaml
        git commit -m "Update flask-app image to ${{ github.sha }}"
        git push

  validate:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      run: az aks get-credentials --resource-group rg-aks-postgres --name aks-postgres-cluster --overwrite-existing

    - name: Wait for cert-manager pods
      run: |
        echo "Checking cert-manager health..."
        kubectl rollout status deployment/cert-manager -n cert-manager --timeout=120s
        kubectl rollout status deployment/cert-manager-webhook -n cert-manager --timeout=120s
        kubectl rollout status deployment/cert-manager-cainjector -n cert-manager --timeout=120s

    - name: Wait for ingress controller
      run: |
        echo "Checking ingress-nginx health..."
        kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=120s

    - name: Verify TLS secrets
      run: |
        echo "Checking if TLS secrets exist..."
        kubectl get secret argocd-tls -n argocd || exit 1
        kubectl get secret flask-tls -n dev || exit 1
