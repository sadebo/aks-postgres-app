name: Deploy

on:
  push:
    branches:
    - main

permissions:
  contents: write # allow commits back to repo

jobs:
  infra:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform -chdir=terraform init -input=false

    - name: Terraform Apply
      run: terraform -chdir=terraform apply -auto-approve

  build:
    needs: infra
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Log in to ACR
      run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login parallelacr987601.azurecr.io -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

    - name: Build and Push Docker image
      run: |
        IMAGE_TAG=${GITHUB_SHA}
        docker build -t parallelacr987601.azurecr.io/flask-app:$IMAGE_TAG ./app
        docker push parallelacr987601.azurecr.io/flask-app:$IMAGE_TAG
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update manifests with new image
      run: |
        sed -i "s|image: .*|image: parallelacr987601.azurecr.io/flask-app:${IMAGE_TAG}|" manifests/base/deployment.yaml

    - name: Commit updated manifest
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add manifests/base/deployment.yaml
        git commit -m "Update flask-app image to ${IMAGE_TAG}" || echo "No changes to commit"
        git push

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: ArgoCD Sync
      run: |
        echo "ArgoCD will reconcile changes automatically via root-app.yaml"
        echo "Check progress with: kubectl get applications -n argocd"
    # Optional: Wait for TLS Secret (uncomment if you want CI to verify certs)
    # - name: Wait for ArgoCD TLS Secret
    #   run: |
    #     for i in {1..30}; do
    #       if kubectl get secret argocd-tls -n argocd >/dev/null 2>&1; then
    #         echo "TLS secret ready!"
    #         exit 0
    #       fi
    #       echo "Waiting for TLS secret..."
    #       sleep 30
    #     done
    #     echo "TLS secret not created in time"
    #     exit 1
