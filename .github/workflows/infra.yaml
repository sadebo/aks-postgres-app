name: Provision Infra + Build & Deploy App

on:
  push:
    branches:
    - main
    paths:
    - 'terraform/**'
    - 'app/**'
    - 'manifests/**'
    - '.github/workflows/deploy.yaml'
  workflow_dispatch:


permissions:
  contents: write

jobs:
  infra:
    name: Provision Infrastructure (AKS + ACR)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.7

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Export ARM env
      run: |
        echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV

    - name: Terraform Init (infra)
      run: terraform -chdir=terraform init -input=false -reconfigure

    - name: Terraform Apply Infra
      run: terraform -chdir=terraform apply -auto-approve \ -target=azurerm_resource_group.rg \ -target=azurerm_container_registry.acr \ -target=azurerm_kubernetes_cluster.aks

  addons:
    name: Install Addons (ArgoCD, Ingress, Cert-manager, Postgres Operator)
    runs-on: ubuntu-latest
    needs: infra

    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.9.7

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Export ARM env
      run: |
        echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV

    - name: Terraform Init (addons)
      run: terraform -chdir=terraform init -input=false -reconfigure

    - name: Terraform Apply Addons
      run: terraform -chdir=terraform apply -auto-approve

  build:
    name: Build & Deploy Flask App
    runs-on: ubuntu-latest
    needs: addons

    steps:
    - uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: ACR Login
      run: az acr login --name parallelacr987601

    - name: Build & Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./app
        push: true
        tags: parallelacr987601.azurecr.io/flask-app:${{ github.sha }}

    - name: Update manifests with new image tag
      run: |
        sed -i "s|image: .*|image: parallelacr987601.azurecr.io/flask-app:${{ github.sha }}|" manifests/base/deployment.yaml
        git config user.name "github-actions"
        git config user.email "actions@github.com"
        git add manifests/base/deployment.yaml
        git commit -m "Update flask-app image to ${{ github.sha }}" || echo "No changes to commit"
        git push

    - name: Get AKS Credentials
      run: az aks get-credentials --resource-group rg-aks-postgres --name aks-postgres-cluster --overwrite-existing
    # Optional: Wait for TLS secrets
    # - name: Wait for ArgoCD TLS Secret
    #   run: |
    #     for i in {1..30}; do
    #       if kubectl get secret argocd-tls -n argocd >/dev/null 2>&1; then
    #         echo "TLS secret ready!"
    #         exit 0
    #       fi
    #       echo "Waiting for TLS secret..."
    #       sleep 30
    #     done
    #     echo "TLS secret not created in time"
    #     exit 1
